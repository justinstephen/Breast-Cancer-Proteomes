setwd("C:/Baseball")
master <- read.csv("master.csv")
head(master)
summary(master)
getinfo <- function(firstname, lastname){
playerline <- subset(master,
nameFirst==firstname & nameLast==lastname)
name.code <- as.character(playerline$playerID)
birthyear <- playerline$birthYear
birthmonth <- playerline$birthMonth
birhtday <- playerline$birthDay
byear <- ifelse(birthmonth <= 6, birthyear, birthyear + 1)
list(name.code=name.code, byear=byear)
}
ruth.info <- getinfo("Babe", "Ruth")
aaron.info <- getinfo("Hank", "Aaron")
bonds.info <- getinfo("Barry", "Bonds")
arond.info <- getinfo("Alex", "Rodriguez")
ruth.info
batting <- read.csv("Batting.csv")
ruth.data <- subset(batting, playerID==ruth.info$name.code)
ruth.data$Age <- ruth.data$yearID - ruth.info$byear
aaron.data <- subset(batting, playerID==aaron.info$name.code)
aaron.data$Age <- aaron.data$yearID - aaron.info$byear
bonds.data <- subset(batting, playerID==bonds.info$name.code)
bonds.data$Age <- bonds.data$yearID - bonds.info$byear
arod.data <- subset(batting, playerID==arod.info$name.code)
arod.info <- getinfo("Alex", "Rodriguez")
arod.data <- subset(batting, playerID==arod.info$name.code)
arod.data$Age <- arod.data$yearID - arod.info$byear
sumsum(c(1,2,3,4))
cumsum(c(1,2,3,4))
with(ruth.data, plot(Age, cumsum(HR), type="1", lty=3, lwd=2,
xlab="Age", ylab="Career Home Runs",
xlim=c(18,45), ylim=c(0,800)))
with(ruth.data, plot(Age, cumsum(HR), type="l", lty=3, lwd=2,
xlab="Age", ylab="Career Home Runs",
xlim=c(18,45), ylim=c(0,800)))
getwd()
setwd("C:/Baseball/master/data")
hofpitching <- read.csv("hofpitching.csv")
head(hofpitching)
hofpitching$BF.group <- with(hofpitching, cut(BF, c(10000, 15000, 20000, 30000),
labels=c("Less than 10000", "(10000, 15000)",
"(15000, 20000)", "more than 20000")))
hofpitching$BF.group <- with(hofpitching, cut(BF, c(10000, 15000, 20000, 30000),
labels=c("Less than 10000", "(10000, 15000)",
"(15000, 20000)", "more than 20000")))
hofpitching$BF.group <- with(hofpitching, cut(BF, c(10000, 15000, 20000, 30000),
labels=c("Less than 10000", "10000, 15000",
"15000, 20000", "more than 20000")))
hofpitching$BF.group <- with(hofpitching, cut(BF, c(0, 10000, 15000, 20000, 30000),
labels=c("Less than 10000", "(10000, 15000)",
"(15000, 20000)", "more than 20000")))
table(BF.group)
table(hofpitching$BF.group)
?bar
plot(table(hofpitching$BF.group))
barplot(table(hofpitching$BF.group))
?pie
pie(table(hofpitching$BF.group))
head(hofpitching)
hist(hofpitching)
hist(hofpitching$WAR)
toppitchers <- subset(hofpitching, WAR>120)
toppitchers
?stripplot
?stripchart
stripchart(hofpitching)
stripchart(hofpitching$WAR)
hofpitching$WAR.Season <- with(hofpitching, WAR / Yrs)
stripchart(hofpitching$WAR.Season)
stripchart(hofpitching$WAR.Season, hofpitching$BF.group
)
stripchart(War.Season ~ BF.Group, data = hofpitching)
stripchart(WAR.Season ~ BF.Group, data = hofpitching)
stripchart(WAR.Season ~ BF.group, data = hofpitching)
stripchart(WAR.Season ~ BF.group, data = hofpitching, method="jitter")
stripchart(WAR.Season ~ BF.group, data = hofpitching, method="jitter", pch=1)
stripchart(WAR.Season ~ BF.group, data = hofpitching, method="jitter", pch=1, las=2)
stripchart(WAR.Season ~ BF.group, data = hofpitching, pch=1, las=2)
?boxplot
boxplot(WAR.Season ~ BF.group, data = hofpitching)
hofpitching$MidYear <- with(hofpitching, (From + To) / 2)
hofpitching.recent <- subset(hofpitching, MidYear >= 1960)
ndx.recent <- order(hofpitching.recent$WAR.Season)
head(ndx.recent)
ndx.recent
?dotplot
dotplot(hofpitching.recent$WAR.Season)
dotchat(hofpitching.recent$WAR.Season)
dotchart(hofpitching.recent$WAR.Season)
?scatterplot
plot(hofpitching$MidYear, hofpitching$WAR.Season)
with(hofpitching, identify(hofpitching$MidYear, hofpitching$WAR.Season, X, n=2))
getwd()
setwd("C:/Baseball")
master <- read.csv("Master.csv")
batting <- read.csv("batting.csv")
?getinfo
getinfo <- function(firstname, lastname){
+     playerline <- subset(master,
+                          nameFirst==firstname & nameLast==lastname)
+     name.code <- as.character(playerline$playerID)
+     birthyear <- playerline$birthYear
+     birthmonth <- playerline$birthMonth
+     birhtday <- playerline$birthDay
+     byear <- ifelse(birthmonth <= 6, birthyear, birthyear + 1)
+     list(name.code=name.code, byear=byear)
)
getinfo <- function(firstname, lastname){
playerline <- subset(master,
nameFirst==firstname & nameLast==lastname)
name.code <- as.character(playerline$playerID)
birthyear <- playerline$birthYear
birthmonth <- playerline$birthMonth
birthday <- playerline$birthDay
byear <- ifelse(birthmonth <= 6, birthyear, birthyear + 1)
list(name.code=name.code, byear=byear)
)
getinfo <- function(firstname, lastname){
playerline <- subset(master,
nameFirst==firstname & nameLast==lastname)
name.code <- as.character(playerline$playerID)
birthyear <- playerline$birthYear
birthmonth <- playerline$birthMonth
birthday <- playerline$birthDay
byear <- ifelse(birthmonth <= 6, birthyear, birthyear + 1)
list(name.code=name.code, byear=byear)}
cobb.info <- getinfo("Ty", "Cobb")
williams.info <- getinfo("Ted", "Williams")
rose.info <- getinfo("Peter", "Rose")
cobb.info
cobb.data <- subset(batting, playerID==cobb.info$name.code)
cobb.data$Age <- cobb.data$yearID - cobb.info$byear
cobb.datat
cobb.data
williams.data <- subset(batting, playerID==williams.info$name.code)
williams.data$Age <- williams.data$yearID - williams.info$byear
rose.data <- subset(batting, playerID==rose.info$name.code)
rose.data$Age <- rose.data$yearID - rose.info$byear
plot(Age, H, data = rose.data)
plot(rose.data$Age, rose.data$H)
head(rose.data)
rose.info <- getinfo("Pete", "Rose")
rose.data <- subset(batting, playerID==rose.info$name.code)
rose.data$Age <- rose.data$yearID - rose.info$byear
head(rose.data)
plot(rose.data$Age, rose.data$H)
lines(rose.data)
lines(lowess(rose.data$Age, rose.data$H))
with(rose.data, plot(Age, cumsum(H), type="l", lty=3, lwd=2,
xlab="Age", ylab="Career Home Runs"))
with(rose.data, plot(Age, cumsum(H), type="l", lty=3, lwd=2,
xlab="Age", ylab="Career Home Runs"))
rose.data$Age
williams.data$age
williams.data$Age
cobb.data$Age
rose.data <- subset(batting, playerID==rose.info$name.code)
rose.data$Age <- rose.data$yearID - rose.info$byear
rose.data
rose.info
williams.info
fix(rose.info)
remove(rose.info)
remove(rose.data
)
rose.info <- getinfo("Pete", "Rose")
rose.data <- subset(batting, playerID==rose.info$name.code)
rose.data$Age <- rose.data$yearID - rose.info$byear
rose.info
rose.info$name.code <- "rosepe01"
rose.info
rose.info$name.code <- 1941
rose.info
rose.info$name.code <- "rosepe01"
rose.info$byear <- 1941
rose.info
with(rose.data, plot(Age, cumsum(H), type="l", lty=3, lwd=2,
xlab="Age", ylab="Career Home Runs"))
rose.data <- subset(batting, playerID==rose.info$name.code)
rose.data$Age <- rose.data$yearID - rose.info$byear
with(rose.data, plot(Age, cumsum(H), type="l", lty=3, lwd=2,
xlab="Age", ylab="Career Home Runs"))
with(cobb.data, lines(Age, cumsum(H), lty-2, lwd=2))
with(cobb.data, lines(Age, cumsum(H), lty=2, lwd=2))
with(williams.data, lines(Age, cumsum(H), lty=1, lwd=2))
legend=c("Rose", "Cobb", "Williams")
legend(20, 700, legend=c("Rose", "Cobb", "Williams"), lty=1 : 3, lwd=2)
legend(20, 3000, legend=c("Rose", "Cobb", "Williams"), lty=1 : 3, lwd=2)
legend(25, 4000, legend=c("Rose", "Cobb", "Williams"), lty=1 : 3, lwd=2)
getwd()
teams <- read.csv("teams.csv")
head(teams)
myteams <- subset(teams, yearID > 2000)[ ,c("teamID", "yearID",
"lgID", "G", "W", "L", "R", "RA")]
head(myteams)
myteams$RD <- with(myteams, R-RA)
myteams$Wpct <- with(myteams, W / (W+L))
head(myteams)
plot(myteams$RD, myteams$Wpct,
xlab="run differential",
ylab="winning percentage")
linfit <- lm(Wpct ~ RD, data=myteams)
linfit
abline(a=coef(linfit)[1], b=coef(linfit)[2], lwd=2)
myteams$linWpct <- predict(linfit)
myteams$linResiduals <- residuals(linfit)
plot(myteams$RD, myteams$linResiduals,
xlab="run differential",
ylab="residual")
abline(h=0, lty=3)
points(c(68, 88), c(.0749, -.0733), pch=19)
text(68, .0749, "LAA '08", pos4, cex=.8)
text(68, .0749, "LAA '08", pos=4, cex=.8)
text(88, -.0733, "CLE '06", pos=4, cex=.8)
x <- 1:4, y <- 2:3
x <- 1:4
y <- 2:3
x + y
x <- 1:4
y <- 2
x + y
install.packages("swirl")
?swirl
help("swirl")
??Swirl
library("swirl")
swirl()
mtcars
allMPG <- mtcars$mpg
allMPG
mean(allMPG)
sampMeanMPG <- mean(allMPG)
sampVarMPG <- var(allMPG)
n <- lenght(allMPG)
n <- length(allMPG)
tStat <- (sampMeanMPG - 12.0) / sqrt(sampVarMPG/n)
myDF <- n -1
tStat
myDF
pVal1 <- pt(tStat, df = myDF, lower.tail=false)
pVal1 <- pt(tStat, df = myDF, lower.tail=FALSE)
pval <- pVal1 * 2
pVal
t.test(allMPG, mu=12.0, alternative = "two.sided")
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
range(cars$price)
61.9-7.4
var(cars$price)
sd(cars$price)
30
50-15
35-20
35-15
20
10
25
2
1
3
4
summary(cars$price)
install.packages(c("boot", "chron", "class", "cluster", "codetools", "DBI", "evaluate", "foreign", "gsubfn", "KernSmooth", "Lahman", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "plotrix", "plyr", "Rcpp", "rpart", "slam", "SnowballC", "spatial", "sqldf", "survival", "swirl", "testthat"))
install.packages("ggplot2")
install.packages("xml")
install.packages("XML")
library("tm")
library("SnowballC")
library("wordcloud")
Files <- "C:/Work Files/Tickets"
CustDict <- as.character(read.table("C:/Work Files/dictionary.txt", sep = "\t")$V1)
Tickets <- Corpus(DirSource(Files))
CleanTickets <- tm_map(Tickets, stripWhitespace)
CleanTickets <- tm_map(CleanTickets, tolower)
CleanTickets <- tm_map(CleanTickets, removeNumbers)
CleanTickets <- tm_map(CleanTickets, removePunctuation)
CleanTickets <- tm_map(CleanTickets, removeWords, stopwords("english"))
CleanTickets <- tm_map(CleanTickets, removeWords, CustDict)
dtm <- DocumentTermMatrix(CleanTickets)
m <- as.matrix(dtm)
v <- sort(colSums(m), decreasing = TRUE)
words <- names(v)
df <- data.frame(words = words, freq = v)
wordcloud(df$word, df$freq, min.freq=100)
library("XML")
library("plyr")
#Pull all data from ESPN and clean up
boknows <- htmlParse("http://games.espn.go.com/ffl/schedule?leagueId=45342")
boknows.table <- readHTMLTable(boknows,stringAsFactors = FALSE)
fullschedule <- boknows.table[2]
bo.df <- ldply(fullschedule, data.frame)
colnames(bo.df) <- c("NULL","AWAY_TEAM", "OWNER", "AT", "HOME_TEAM", "OWNER", "RESULT")
week1 <- bo.df[ 2:7,c(2, 5, 7)]
week2 <- bo.df[ 11:16,c(2, 5, 7)]
week3 <- bo.df[ 20:25,c(2, 5, 7)]
week4 <- bo.df[ 29:34,c(2, 5, 7)]
week5 <- bo.df[ 38:43,c(2, 5, 7)]
week6 <- bo.df[ 47:52,c(2, 5, 7)]
week7 <- bo.df[ 56:61,c(2, 5, 7)]
week8 <- bo.df[ 65:70,c(2, 5, 7)]
week9 <- bo.df[ 74:79,c(2, 5, 7)]
week10 <- bo.df[ 83:88,c(2, 5, 7)]
week11 <- bo.df[ 92:97,c(2, 5, 7)]
week12 <- bo.df[ 101:106,c(2, 5, 7)]
week13 <- bo.df[ 110:115,c(2, 5, 7)]
week14 <- bo.df[ 119:124,c(2, 5, 7)]
weeks <- list(week1=week1, week2=week2, week3=week3, week4=week4, week5=week5, week6=week6, week7=week7, week8=week8, week9=week9,
week10=week10, week11=week11, week12=week12, week13=week13, week14=week14)
#This is the section that will loop over and create a data frame for each week, then clean each up and merge them into one list
week.summary <- lapply(weeks, function(df)
{
df$AWAY_SCORE <- gsub("-.*", "", df$RESULT)
df$HOME_SCORE <- gsub(".*-", "", df$RESULT)
df <- df[,c("AWAY_TEAM","AWAY_SCORE","HOME_TEAM","HOME_SCORE")]
df$AWAY_TEAM <- gsub("\\(.*", "", df$AWAY_TEAM)
df$HOME_TEAM <- gsub("\\(.*", "", df$HOME_TEAM)
df.scores <- df
colnames(df.scores) <- c("TEAM","RESULT","TEAM","RESULT")
df.scores <- rbind(df.scores[1:2],df.scores[3:4])
})
#This loop will replace the generic "RESULT" from earlier with the column of the week name
for (week in 1:14) {
names(week.summary[[week]]) <- c("TEAM", paste("WEEK", week, sep=""))
}
#This loop will take the list of data frames and turn it into one data frame with all the point totals for all teams
all.scores <- week.summary[[1]]
for (week in 2:14) {
all.scores <- join(all.scores, week.summary[[week]], by = "TEAM")
}
#Strips off the named column and adds it as a data frame row name as well as converts all data to numeric
new.all.scores <- all.scores[,-1]
new.all.scores <- sapply(new.all.scores, as.numeric)
row.names(new.all.scores) <- all.scores$TEAM
#Creates the stats data frame to be used to simulate games
stats <- data.frame(Mean = rowMeans(new.all.scores, na.rm = TRUE), SD = apply(new.all.scores, 1, sd, na.rm=TRUE))
stats <- data.frame(team = row.names(stats), mean = stats$Mean, sd = stats$SD)
#This is the function that will simulate a score when given a team name based on the "stats" table
sim.score <- function(x) {
x.mean <- stats[stats$team == x, "mean"]
x.sd <- stats[stats$team == x, "sd"]
score <- rnorm(1, mean = x.mean, sd = x.sd)
}
#Loops over the list of week dataframes to clean off unnecessary characters and format
schedule <- lapply(weeks, function(df)
{
df$WEEK <- as.character(deparse(substitute(df)))
df$WEEK <- paste("week", gsub("L\\]\\]", "",gsub("X\\[\\[","",df$WEEK)), sep = "")
df$AWAY_SCORE <- gsub("-.*", "", df$RESULT)
df$HOME_SCORE <- gsub(".*-", "", df$RESULT)
df$AWAY_TEAM <- gsub("\\(.*", "", df$AWAY_TEAM)
df$HOME_TEAM <- gsub("\\(.*", "", df$HOME_TEAM)
df <- df[,c("WEEK","AWAY_TEAM","AWAY_SCORE","HOME_TEAM","HOME_SCORE")]
df$AWAY_SCORE <- ifelse(df$AWAY_SCORE == "Preview", df$AWAY_SCORE <- NA,
ifelse(df$AWAY_SCORE == "Box", df$AWAY_SCORE <- NA, as.numeric(df$AWAY_SCORE)))
df$HOME_SCORE<- ifelse(df$HOME_SCORE == "Preview", df$HOME_SCORE <- NA,
ifelse(df$HOME_SCORE == "Box", df$HOME_SCORE <- NA, as.numeric(df$HOME_SCORE)))
df <- as.data.frame(df)
})
#Groups all the dataframes into one
schedule = Reduce(function(...) merge(..., all=T), schedule)
#This initializes the list of teams that will make playoffs and will be OUTSIDE the loop
playoff.teams.total <- character()
###################################################
###                 BEGIN LOOP                 ####
###################################################
games = 0
while (games < 100000) {
games = games + 1
scoreboard <- schedule
#This simulates a score to replace all the NA's
for (i in 1:nrow(scoreboard)) {
ifelse(is.na(scoreboard$AWAY_SCORE[i]),
scoreboard$AWAY_SCORE[i] <- sim.score(scoreboard$AWAY_TEAM[i]),
scoreboard$AWAY_SCORE[i] <- scoreboard$AWAY_SCORE[i])
}
for (i in 1:nrow(scoreboard)) {
ifelse(is.na(scoreboard$HOME_SCORE[i]),
scoreboard$HOME_SCORE[i] <- sim.score(scoreboard$HOME_TEAM[i]),
scoreboard$HOME_SCORE[i] <- scoreboard$HOME_SCORE[i])
}
#This creates a new column with TRUE and FALSE for winners
scoreboard$WINNERS <- scoreboard$AWAY_SCORE > scoreboard$HOME_SCORE
#Changes the TRUE / FALSE values to the name of the team that won
scoreboard[scoreboard$WINNERS == FALSE,]$WINNERS <- as.character(scoreboard[scoreboard$WINNERS == FALSE,]$HOME_TEAM)
scoreboard[scoreboard$WINNERS == TRUE,]$WINNERS <- as.character(scoreboard[scoreboard$WINNERS == TRUE,]$AWAY_TEAM)
wins.total <- as.data.frame(table(scoreboard$WINNERS))
colnames(wins.total) <- c("team", "wins")
#Build the standings DF. This needs to be cleaned up later to built the team list automatically
team <- all.scores$TEAM
division <- c(1,2,2,1,2,1,1,2,2,2,1,1)
standings <- data.frame(division, team)
standings <- merge(x = standings, y = wins.total, by = "team", all.x=TRUE)
#Populate a table of total points of all teams and then append it to the standings table
points <- c(0,0,0,0,0,0,0,0,0,0,0,0)
total.points <- data.frame(team,points)
for (i in team) {
total.points[team == i,]$points <- sum(scoreboard[scoreboard$AWAY_TEAM == i,]$AWAY_SCORE) + sum(scoreboard[scoreboard$HOME_TEAM == i,]$AWAY_SCORE)
}
standings <- merge(x = standings, y = total.points, by = "team", all.x=TRUE)
#Clean up the standings tables
standings[is.na(standings)] <- 0
standings<- standings[with(standings, order(wins, points, decreasing=TRUE)),]
#This will determine the two division winners
div1.winner <- as.character(standings[standings$division ==1, "team"][1])
div2.winner <- as.character(standings[standings$division ==2, "team"][1])
#This will determine the wildcard teams
wildcard <- subset(standings, team != div1.winner & team != div2.winner)
wc1 <- as.character(wildcard[1,"team"])
wc2 <- as.character(wildcard[2,"team"])
#List of playoff teams
playoff.teams <- c(div1.winner, div2.winner, wc1, wc2)
playoff.teams.total <- append(playoff.teams.total, playoff.teams)
}
###################################################
###                  END LOOP                  ####
###################################################
#Puts data into a data.frame and formats
po.freq <- as.data.frame(table(playoff.teams.total))
colnames(po.freq) <- c("team", "count")
po.freq <- po.freq[with(po.freq, order(po.freq$count, decreasing = TRUE)),]
po.freq
install.packages(c("nlme", "survival"))
update.packages()
install.packages(leaps)
library(leaps)
fit <- regsubsets(y~.,data=freeny)
plot(fit)
install.packages("leaps")
library("leaps")
fit <- regsubsets(y~.,data=freeny)
plot(fit)
install.packages(c("DBI", "dplyr", "foreign", "lattice", "Matrix", "mgcv", "R6", "Rcpp", "survival"))
install.packages("markdown")
installed.packages("rmarkdown")
install.packages("rmarkdown")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: cars
summary(cars)
# Chunk 3: pressure
plot(pressure)
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("dplyr")
install.packages("scales")
install.packages("GGally")
update.packages("Knitr")
update.packages("knitr")
render("input.md")
load.packages("rmarkdown")
library("rmarkdown", lib.loc="C:/Program Files/R/R-3.3.0/library")
render("input.md")
render("test.md")
library("rmarkdown")
patients <- read.csv(clinical_data_breast_cancer, header = TRUE)
setwd("C:/Projects/BreastCancer")
patients <- read.csv(clinical_data_breast_cancer, header = TRUE)
patients <- read.csv("clinical_data_breast_cancer.csv", header = TRUE)
head(patients)
summary(patients)
patients <- as.data.frame(read.csv("clinical_data_breast_cancer.csv", header = TRUE))
head(patients)
samples <- as.data.frame(read.csv("clinical_data_breast_cancer.csv", header = TRUE))
summary(samples)
samples <- as.data.frame(read.csv("clinical_data_breast_cancer.csv", header = TRUE))
head(samples)
setwd("C:/Projects/BreastCancer")
describe(samples)
dim(samples)
summary(samples$Age.at.Initial.Pathologic.Diagnosis)
names(samples)
